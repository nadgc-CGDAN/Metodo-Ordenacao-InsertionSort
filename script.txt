*********************Para 10^4**************************************


1. Tamanho do array aleatorio: 10000, Tempo de execucao: 366.5334806442261 segundos

2. Tamanho do array aleatorio: 10000, Tempo de execucao: 417.70059633255005 segundos

3. Tamanho do array aleatorio: 10000, Tempo de execucao: 432.3728697299957 segundos

4. Tamanho do array aleatorio: 10000, Tempo de execucao: 397.02604937553406 segundos

5. Tamanho do array aleatorio: 10000, Tempo de execucao: 372.7201828956604 segundos


***********************Para 10^5***************************************************
1. Tamanho do array aleatorio: 100000, Tempo de execucao: 14.811830997467041 segundos
Array fornecido ordenado em ordem decrescente:
[47, 37, 33, 31, 30, 26, 24, 23, 16, 14, 11, 9]

2. Tamanho do array aleatorio: 100000, Tempo de execucao: 9.68910264968872 segundos
Array fornecido ordenado em ordem decrescente:
[47, 37, 33, 31, 30, 26, 24, 23, 16, 14, 11, 9]

3. Tamanho do array aleatorio: 100000, Tempo de execucao: 9.40491795539856 segundos
Array fornecido ordenado em ordem decrescente:
[47, 37, 33, 31, 30, 26, 24, 23, 16, 14, 11, 9]

4. Tamanho do array aleatorio: 100000, Tempo de execucao: 9.415244340896606 segundos
Array fornecido ordenado em ordem decrescente:
[47, 37, 33, 31, 30, 26, 24, 23, 16, 14, 11, 9]

5. Tamanho do array aleatorio: 100000, Tempo de execucao: 9.450270414352417 segundos
Array fornecido ordenado em ordem decrescente:
[47, 37, 33, 31, 30, 26, 24, 23, 16, 14, 11, 9]








**********************Para 10^6****************************************************
C:\Users\cd\Desktop\Projetos-AA-2024\Metódo-Ordenação>pypy 1000000-insertionsort.py


1.  Tamanho do array aleatorio: 1000000, Tempo de execucao: 1249.0389556884766 segundos
Array fornecido ordenado em ordem decrescente:
[47, 37, 33, 31, 30, 26, 24, 23, 16, 14, 11, 9]

2. Tamanho do array aleatorio: 1000000, Tempo de execucao: 2501.098143339157 segundos
Array fornecido ordenado em ordem decrescente:
[47, 37, 33, 31, 30, 26, 24, 23, 16, 14, 11, 9]

3. Tamanho do array aleatorio: 1000000, Tempo de execucao: 1070.461433649063 segundos
Array fornecido ordenado em ordem decrescente:
[47, 37, 33, 31, 30, 26, 24, 23, 16, 14, 11, 9]

********************************Para 10^7  heapsort*************************************************
Array de exemplo ordenado em ordem decrescente:
1. [47, 37, 33, 31, 30, 26, 24, 23, 16, 14, 11, 9]
Numero de comparaccoes para o array de exemplo: 30
Numero de trocas para o array de exemplo: 34
Tempo de execucao para o array de exemplo: 0.000000 segundos
Tamanho do array grande: 10000000, Tempo de execucao: 27.419210 segundos

2. Array de exemplo ordenado em ordem decrescente:
[47, 37, 33, 31, 30, 26, 24, 23, 16, 14, 11, 9]
Numero de comparacoes para o array de exemplo: 30
Numero de trocas para o array de exemplo: 34
Tempo de execucao para o array de exemplo: 0.000000 segundos
Tamanho do array grande: 10000000, Tempo de execucao: 30.441215 segundos


3. Array de exemplo ordenado em ordem decrescente:
[47, 37, 33, 31, 30, 26, 24, 23, 16, 14, 11, 9]
Numero de comparacoes para o array de exemplo: 30
Numero de trocas para o array de exemplo: 34
Tempo de execucao para o array de exemplo: 0.000000 segundos
Tamanho do array grande: 10000000, Tempo de execucao: 28.653027 segundos


4. Array de exemplo ordenado em ordem decrescente:
[47, 37, 33, 31, 30, 26, 24, 23, 16, 14, 11, 9]
Numero de comparacoes para o array de exemplo: 30
Numero de trocas para o array de exemplo: 34
Tempo de execucao para o array de exemplo: 0.000000 segundos
Tamanho do array grande: 10000000, Tempo de execucao: 24.628355 segundos


5. Array de exemplo ordenado em ordem decrescente:
[47, 37, 33, 31, 30, 26, 24, 23, 16, 14, 11, 9]
Numero de comparacoes para o array de exemplo: 30
Numero de trocas para o array de exemplo: 34
Tempo de execucao para o array de exemplo: 0.000000 segundos
Tamanho do array grande: 10000000, Tempo de execucao: 31.232731 segundos













import time
import random

def insertion_sort(array):
    """Ordena um array usando o algoritmo Insertion Sort."""
    n = len(array)
    comparacoes = 0  # Contador para comparações
    trocas = 0       # Contador para trocas
    for i in range(1, n):
        chave = array[i]
        j = i - 1
        # Move os elementos do array que são maiores que a chave para uma posição à frente
        while j >= 0 and array[j] < chave:
            comparacoes += 1  # Incrementa o contador de comparações
            array[j + 1] = array[j]
            trocas += 1       # Incrementa o contador de trocas
            j -= 1
        comparacoes += 1  # Conta a última comparação onde array[j] <= chave
        array[j + 1] = chave
    return array, comparacoes, trocas

def main():
    """Função principal que executa o programa."""
    size = 10**7  # Tamanho do array aleatório

    # Array de exemplo com os mesmos valores
    array = [31, 14, 23, 37, 11, 26, 16, 9, 47, 30, 33, 24] * (size // 12)
    
    # Gera um array aleatório de tamanho 10^7 com os mesmos valores do array de exemplo
    array_random = array[:]

    # Inicia a contagem de tempo para o array de exemplo
    start_time_example = time.time()

    # Ordena o array de exemplo em ordem decrescente usando o insertion sort
    sorted_array_example, comparacoes_example, trocas_example = insertion_sort(array.copy())

    # Finaliza a contagem de tempo para o array de exemplo
    end_time_example = time.time()

    # Imprime uma amostra do array de exemplo ordenado
    print("Amostra do array de exemplo ordenado:")
    print(sorted_array_example[:10])

    # Imprime o número de comparações e trocas realizadas para o array de exemplo
    print("Numero de comparações para o array de exemplo:", comparacoes_example)
    print("Numero de trocas para o array de exemplo:", trocas_example)

    # Calcula e imprime o tempo de execução para o array de exemplo
    execution_time_example = end_time_example - start_time_example
    print(f"Tamanho do array de exemplo: {len(array)}, Tempo de execucao: {execution_time_example:.6f} segundos")

    # Inicia a contagem de tempo para o array aleatório
    start_time_random = time.time()

    # Ordena o array aleatório em ordem decrescente usando o insertion sort
    sorted_array_random, comparacoes_random, trocas_random = insertion_sort(array_random.copy())

    # Finaliza a contagem de tempo para o array aleatório
    end_time_random = time.time()

    # Calcula e imprime o tempo de execução para o array aleatório
    execution_time_random = end_time_random - start_time_random
    print(f"Tamanho do array aleatorio: {size}, Tempo de execucao: {execution_time_random:.6f} segundos")

    # Imprime uma amostra do array aleatório ordenado em ordem decrescente
    print("Amostra do array aleatorio ordenado em ordem decrescente:")
    print(sorted_array_random[:10])

if __name__ == "__main__":
    main()











*******************************************Para 10^8********************************************

1. Array de exemplo ordenado em ordem decrescente:
[47, 37, 33, 31, 30, 26, 24, 23, 16, 14, 11, 9]
Tempo de execucao para o array de exemplo: 0.000000 segundos
Tamanho do array aleatorio: 100000000, Tempo de execucao: 183.357822 segundos

2. Array de exemplo ordenado em ordem decrescente:
[47, 37, 33, 31, 30, 26, 24, 23, 16, 14, 11, 9]
Tempo de execucao para o array de exemplo: 0.000000 segundos
Tamanho do array aleatorio: 100000000, Tempo de execucao: 201.925865 segundos

3. Array de exemplo ordenado em ordem decrescente:
[47, 37, 33, 31, 30, 26, 24, 23, 16, 14, 11, 9]
Tempo de execucao para o array de exemplo: 0.000000 segundos
Tamanho do array aleatorio: 100000000, Tempo de execucao: 202.142489 segundos

4. Array de exemplo ordenado em ordem decrescente:
[47, 37, 33, 31, 30, 26, 24, 23, 16, 14, 11, 9]
Tempo de execucao para o array de exemplo: 0.000000 segundos
Tamanho do array aleatorio: 100000000, Tempo de execucao: 207.774686 segundos

5. Array de exemplo ordenado em ordem decrescente:
[47, 37, 33, 31, 30, 26, 24, 23, 16, 14, 11, 9]
Tempo de execucao para o array de exemplo: 0.001001 segundos
Tamanho do array aleatorio: 100000000, Tempo de execucao: 198.634002 segundos









































import time
import random

def insertion_sort(array):
    """Ordena um array usando o algoritmo Insertion Sort."""
    n = len(array)
    comparacoes = 0  # Contador para comparações
    trocas = 0       # Contador para trocas
    for i in range(1, n):
        chave = array[i]
        j = i - 1
        # Move os elementos do array que são maiores que a chave para uma posição à frente
        while j >= 0 and array[j] < chave:
            comparacoes += 1  # Incrementa o contador de comparações
            array[j + 1] = array[j]
            trocas += 1       # Incrementa o contador de trocas
            j -= 1
        comparacoes += 1  # Conta a última comparação onde array[j] <= chave
        array[j + 1] = chave
    return array, comparacoes, trocas

def main():
    """Função principal que executa o programa."""
    size = 10**8  # Tamanho do array aleatório

    # Para tamanhos muito grandes, a criação do array pode ser muito lenta
    # ou causar problemas de memória. Ajuste conforme necessário.
    
    # Gera um array aleatório de tamanho 10^8com os mesmos valores do array de exemplo
    array_random = array[:]
   
    # Inicia a contagem de tempo para o array de exemplo
    start_time_example = time.time()

    # Ordena o array de exemplo em ordem decrescente usando o insertion sort
    sorted_array_example, comparacoes_example, trocas_example = insertion_sort(array.copy())

    # Finaliza a contagem de tempo para o array de exemplo
    end_time_example = time.time()

    # Imprime uma amostra do array de exemplo ordenado
    print("Amostra do array de exemplo ordenado:")
    print(sorted_array_example[:10])

    # Imprime o número de comparações e trocas realizadas para o array de exemplo
    print("Número de comparações para o array de exemplo:", comparacoes_example)
    print("Número de trocas para o array de exemplo:", trocas_example)

    # Calcula e imprime o tempo de execução para o array de exemplo
    execution_time_example = end_time_example - start_time_example
    print(f"Tamanho do array de exemplo: {len(array)}, Tempo de execução: {execution_time_example:.6f} segundos")

    # Inicia a contagem de tempo para o array aleatório
    start_time_random = time.time()

    # Ordena o array aleatório em ordem decrescente usando o insertion sort
    sorted_array_random, comparacoes_random, trocas_random = insertion_sort(array_random.copy())

    # Finaliza a contagem de tempo para o array aleatório
    end_time_random = time.time()

    # Calcula e imprime o tempo de execução para o array aleatório
    execution_time_random = end_time_random - start_time_random
    print(f"Tamanho do array aleatório: {array_sample_size}, Tempo de execução: {execution_time_random:.6f} segundos")

    # Imprime uma amostra do array aleatório ordenado em ordem decrescente
    print("Amostra do array aleatório ordenado em ordem decrescente:")
    print(sorted_array_random[:10])

if __name__ == "__main__":
    main()
